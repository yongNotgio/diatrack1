// --- lib/providers/metrics_provider.dart ---
import 'package:flutter/material.dart';
import '../services/supabase_service.dart';
import '../models/health_metric.dart';
import 'auth_provider.dart'; // To get patientId

class MetricsProvider with ChangeNotifier {
  final SupabaseService _supabaseService;
  final AuthProvider _authProvider; // Depend on AuthProvider

  List<HealthMetric> _metrics = [];
  List<HealthMetric> get metrics => _metrics;

  bool _isLoading = false;
  bool get isLoading => _isLoading;

  String? _error;
  String? get error => _error;

  // Constructor requires SupabaseService and AuthProvider
  MetricsProvider(this._supabaseService, this._authProvider) {
    // Listen to auth changes to fetch metrics when logged in/profile available
    _authProvider.addListener(_handleAuthChange);
    _handleAuthChange(); // Initial check
  }

  void _handleAuthChange() {
    if (_authProvider.authState == AuthStateEnum.authenticated &&
        _authProvider.patientProfile != null) {
      fetchMetrics(); // Fetch metrics when user is authenticated and profile is loaded
    } else {
      _metrics = []; // Clear metrics if logged out or no profile
      _isLoading = false;
      _error = null;
      notifyListeners();
    }
  }

  Future<void> fetchMetrics() async {
    final patientId = _authProvider.patientProfile?.patientId;
    if (patientId == null) {
      _error = "Patient profile not available.";
      _isLoading = false;
      notifyListeners();
      return;
    }

    _isLoading = true;
    _error = null;
    notifyListeners();

    try {
      _metrics = await _supabaseService.getHealthMetrics(patientId);
    } catch (e) {
      _error = "Failed to fetch metrics: $e";
      _metrics = []; // Clear metrics on error
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<bool> addMetric({
    double? glucoseFasting,
    double? glucosePostprandial,
    int? bloodPressureSystolic,
    int? bloodPressureDiastolic,
    int? pulseRate,
  }) async {
    final patientId = _authProvider.patientProfile?.patientId;
    if (patientId == null) {
      _error = "Cannot add metric: Patient profile not available.";
      notifyListeners();
      return false;
    }

    _isLoading = true;
    _error = null;
    notifyListeners();

    // Create a metric object - IDs will be generated by Supabase
    final newMetric = HealthMetric(
      metricId: '', // Placeholder
      patientId: patientId, // Use the actual patient ID
      glucoseFasting: glucoseFasting,
      glucosePostprandial: glucosePostprandial,
      bloodPressureSystolic: bloodPressureSystolic,
      bloodPressureDiastolic: bloodPressureDiastolic,
      pulseRate: pulseRate,
      submissionDate: DateTime.now(), // Placeholder, DB uses default
    );

    try {
      final addedMetric = await _supabaseService.addHealthMetric(newMetric);
      if (addedMetric != null) {
        _metrics.insert(0, addedMetric); // Add to the beginning of the list
        _isLoading = false;
        notifyListeners();
        return true;
      } else {
        _error = "Failed to add metric.";
        _isLoading = false;
        notifyListeners();
        return false;
      }
    } catch (e) {
      _error = "Error adding metric: $e";
      _isLoading = false;
      notifyListeners();
      return false;
    }
  }

  @override
  void dispose() {
    _authProvider.removeListener(_handleAuthChange); // Clean up listener
    super.dispose();
  }
}
